{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f4eb7f1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: torch in /home/auritarius/.local/lib/python3.10/site-packages (1.11.0)\n",
      "Requirement already satisfied: matplotlib in /home/auritarius/.local/lib/python3.10/site-packages (3.5.1)\n",
      "Requirement already satisfied: pandas in /home/auritarius/.local/lib/python3.10/site-packages (1.4.0)\n",
      "Requirement already satisfied: numpy in /usr/lib64/python3.10/site-packages (1.21.5)\n",
      "Requirement already satisfied: typing-extensions in /home/auritarius/.local/lib/python3.10/site-packages (from torch) (4.0.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/lib64/python3.10/site-packages (from matplotlib) (8.3.2)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in /usr/lib/python3.10/site-packages (from matplotlib) (2.4.7)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/lib/python3.10/site-packages (from matplotlib) (2.8.1)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/lib/python3.10/site-packages (from matplotlib) (21.3)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /home/auritarius/.local/lib/python3.10/site-packages (from matplotlib) (1.3.2)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /home/auritarius/.local/lib/python3.10/site-packages (from matplotlib) (4.29.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /home/auritarius/.local/lib/python3.10/site-packages (from matplotlib) (0.11.0)\n",
      "Requirement already satisfied: pytz>=2020.1 in /home/auritarius/.local/lib/python3.10/site-packages (from pandas) (2021.3)\n",
      "Requirement already satisfied: six>=1.5 in /home/auritarius/.local/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.12.0)\n",
      "\u001b[33mWARNING: You are using pip version 22.0.3; however, version 22.0.4 is available.\n",
      "You should consider upgrading via the '/usr/bin/python3 -m pip install --upgrade pip' command.\u001b[0m\u001b[33m\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "!pip install torch matplotlib pandas numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "28aa7eaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"KMP_DUPLICATE_LIB_OK\"] = \"TRUE\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "70ec2ac6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch import nn as nn # for NN\n",
    "from torch.utils.data import Dataset # class to create dataset class\n",
    "from torch import optim # Optimizer\n",
    "from torch.nn import functional as F # activation functions\n",
    "import matplotlib.pyplot as plt # to plot a graph\n",
    "import pandas as pd # py data analysis\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f3711c57",
   "metadata": {},
   "outputs": [],
   "source": [
    "DEVICE = torch.device(\"cpu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0689847b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('../Materiale/diabetes.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "86ea67c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "class DataSet(Dataset):\n",
    "    \n",
    "    def __init__(self, path):\n",
    "        self.dataset = pd.read_csv(path).values\n",
    "        \n",
    "    def __len__(self):\n",
    "        return len(self.dataset)\n",
    "    \n",
    "    def __getitem__(self, i):\n",
    "        return self.dataset[i, :-1], self.dataset[i, -1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fb5b56f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Net(nn.Module):\n",
    "    \n",
    "    def __init__(self, n_features):\n",
    "        super().__init__()\n",
    "        self.n_features = n_features\n",
    "        \n",
    "        #Fully connected strat 1\n",
    "        self.fc1 = nn.Linear(self.n_features, 16)\n",
    "        self.fc2 = nn.Linear(16,32)\n",
    "        self.fc3 = nn.Linear(32, 1)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        \n",
    "        out = F.relu(self.fc1(x))\n",
    "        out = F.relu(self.fc2(out))\n",
    "        out = F.sigmoid(self.fc3(out))\n",
    "        \n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1703b93a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Training loop for our network\n",
    "def training_loop(n_epochs, optimizer, model, loss_fn, train_loader, test_loader, print_plot=True):\n",
    "    \n",
    "    #Initializing two lists to save accuracy to plot them later\n",
    "    \n",
    "    train_accuracy = torch.zeros(n_epochs)\n",
    "    test_accuracy = torch.zeros(n_epochs)\n",
    "    \n",
    "    train_loss = np.zeros(n_epochs)\n",
    "    test_loss = np.zeros(n_epochs)\n",
    "    \n",
    "    # Going thru every epoch\n",
    "    for epoch in range(n_epochs):\n",
    "        \n",
    "        # Train\n",
    "        model.train()\n",
    "        total = 0\n",
    "        correct = 0\n",
    "        current_train_loss = 0.0\n",
    "        # Going thru example, thru every batch, in our case, thru all data at once\n",
    "        \n",
    "        for example, labels in train_loader:\n",
    "            \n",
    "            # Translating calculations to gpu if is available\n",
    "            example = example.to(DEVICE).float()\n",
    "            labels = labels.to(DEVICE).float()\n",
    "            \n",
    "            # ensuring equal number of dimensions for labels and examples\n",
    "            labels = labels.unsqueeze(1)\n",
    "            \n",
    "            # running our data thru our data - forward\n",
    "            predicted = model(example)\n",
    "            # Gettings loss of out network right now\n",
    "            \n",
    "            loss = loss_fn(predicted, labels)\n",
    "            current_train_loss += loss\n",
    "            \n",
    "            total += labels.shape[0]\n",
    "            predicted = torch.round(predicted)\n",
    "            correct += (predicted == labels).sum()\n",
    "            \n",
    "            # Zeroing the gradient to not stack it from other iterations\n",
    "            optimizer.zero_grad()\n",
    "            # Running backward part of the neural network, getting gradients\n",
    "            loss.backward()\n",
    "            # Updating our parameters\n",
    "            optimizer.step()\n",
    "            \n",
    "        train_accuracy[epoch] = correct / total\n",
    "        train_loss[epoch] = current_train_loss / total \n",
    "        \n",
    "        # Test\n",
    "        \n",
    "        model.eval()\n",
    "        correct = 0\n",
    "        total = 0\n",
    "        current_test_loss = 0\n",
    "        \n",
    "        correct = 0\n",
    "        total = 0\n",
    "        \n",
    "        for examples, labels in test_loader:\n",
    "            examples = examples.to(device=DEVICE).float()\n",
    "            labels = labels.to(device=DEVICE).float()\n",
    "            \n",
    "            labels = labels.unsqueeze(1)\n",
    "            predicted = model(examples)\n",
    "            \n",
    "            loss = loss_fn(predicted, labels)\n",
    "            current_test_loss += loss\n",
    "            \n",
    "            total += labels.shape[0]\n",
    "            predicted = torch.round(predicted)\n",
    "            \n",
    "            correct += (predicted == labels).sum()\n",
    "            \n",
    "        test_accuracy[epoch] = correct / total\n",
    "        test_loss[epoch] = current_test_loss / total\n",
    "        \n",
    "        if (epoch+1) % 10 == 0:\n",
    "            print(f'Epoch: {epoch+1}',\n",
    "                 f'Train Accuracy: {train_accuracy[epoch]}',\n",
    "                 f'Test Accuracy: {test_accuracy[epoch]}')\n",
    "            \n",
    "    # If set to True, print graph of train and validation loss\n",
    "    if print_plot:\n",
    "        \n",
    "        #Setting x-ticks\n",
    "        epochs_range = range(1, n_epochs+1)\n",
    "        \n",
    "        # fig, ax = plt.subplots(nrows=1, ncols=2)\n",
    "        plt.subplots(figsize=(10, 6))\n",
    "        \n",
    "        plt.subplot(1, 2, 1)\n",
    "        plt.plot(epochs_range, train_loss, 'g', label='Training loss')\n",
    "        plt.plot(epochs_range, test_loss, 'b', label='Test loss')\n",
    "        plt.title('Training and Test Loss')\n",
    "        plt.xlabel('Epochs')\n",
    "        plt.ylabel('Loss')\n",
    "        plt.legend()\n",
    "\n",
    "        # #Ploting both curves, train and val \n",
    "        plt.subplot(1, 2, 2)\n",
    "        plt.plot(epochs_range, train_accuracy, 'g', label='Training accuracy')\n",
    "        plt.plot(epochs_range, test_accuracy, 'b', label='Test accuracy')\n",
    "        plt.title('Training and Test Accuracy')\n",
    "        plt.xlabel('Epochs')\n",
    "        plt.ylabel('Accuracy')\n",
    "        plt.legend()\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6fbe8998",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = DataSet(r'../Materiale/diabetes.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a7f76f54",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_samples = len(data)\n",
    "\n",
    "n_test = int(n_samples*0.2)\n",
    "\n",
    "train_set, test_set = torch.utils.data.random_split(data, [n_samples-n_test, n_test])\n",
    "train_loader = torch.utils.data.DataLoader(train_set, \n",
    "                                           batch_size = len(train_set), shuffle = True)\n",
    "\n",
    "\n",
    "test_loader = torch.utils.data.DataLoader(test_set, batch_size = len(test_set), \n",
    "                                         shuffle = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "911ee874",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/auritarius/.local/lib/python3.10/site-packages/torch/nn/functional.py:1944: UserWarning: nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.\n",
      "  warnings.warn(\"nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 10 Train Accuracy: 0.6780487895011902 Test Accuracy: 0.6535947918891907\n",
      "Epoch: 20 Train Accuracy: 0.7186991572380066 Test Accuracy: 0.673202633857727\n",
      "Epoch: 30 Train Accuracy: 0.7398374080657959 Test Accuracy: 0.6797385811805725\n",
      "Epoch: 40 Train Accuracy: 0.7349593639373779 Test Accuracy: 0.686274528503418\n",
      "Epoch: 50 Train Accuracy: 0.7560975551605225 Test Accuracy: 0.673202633857727\n",
      "Epoch: 60 Train Accuracy: 0.7609755992889404 Test Accuracy: 0.6797385811805725\n",
      "Epoch: 70 Train Accuracy: 0.7544715404510498 Test Accuracy: 0.6666666865348816\n",
      "Epoch: 80 Train Accuracy: 0.7691056728363037 Test Accuracy: 0.6797385811805725\n",
      "Epoch: 90 Train Accuracy: 0.7707316875457764 Test Accuracy: 0.6797385811805725\n",
      "Epoch: 100 Train Accuracy: 0.7886179089546204 Test Accuracy: 0.6993464231491089\n",
      "Epoch: 110 Train Accuracy: 0.7788617610931396 Test Accuracy: 0.6993464231491089\n",
      "Epoch: 120 Train Accuracy: 0.7918699383735657 Test Accuracy: 0.7124183177947998\n",
      "Epoch: 130 Train Accuracy: 0.7967479825019836 Test Accuracy: 0.7254902124404907\n",
      "Epoch: 140 Train Accuracy: 0.7983739972114563 Test Accuracy: 0.7189542651176453\n",
      "Epoch: 150 Train Accuracy: 0.7934959530830383 Test Accuracy: 0.7254902124404907\n",
      "Epoch: 160 Train Accuracy: 0.8048780560493469 Test Accuracy: 0.7385621070861816\n",
      "Epoch: 170 Train Accuracy: 0.795121967792511 Test Accuracy: 0.7189542651176453\n",
      "Epoch: 180 Train Accuracy: 0.8146341443061829 Test Accuracy: 0.7450980544090271\n",
      "Epoch: 190 Train Accuracy: 0.8065040707588196 Test Accuracy: 0.7189542651176453\n",
      "Epoch: 200 Train Accuracy: 0.8081300854682922 Test Accuracy: 0.7189542651176453\n",
      "Epoch: 210 Train Accuracy: 0.8113821148872375 Test Accuracy: 0.7058823704719543\n",
      "Epoch: 220 Train Accuracy: 0.8162601590156555 Test Accuracy: 0.7516340017318726\n",
      "Epoch: 230 Train Accuracy: 0.8130081295967102 Test Accuracy: 0.758169949054718\n",
      "Epoch: 240 Train Accuracy: 0.795121967792511 Test Accuracy: 0.6993464231491089\n",
      "Epoch: 250 Train Accuracy: 0.7983739972114563 Test Accuracy: 0.6993464231491089\n",
      "Epoch: 260 Train Accuracy: 0.8243902325630188 Test Accuracy: 0.7320261597633362\n",
      "Epoch: 270 Train Accuracy: 0.8243902325630188 Test Accuracy: 0.7320261597633362\n",
      "Epoch: 280 Train Accuracy: 0.8308942914009094 Test Accuracy: 0.7124183177947998\n",
      "Epoch: 290 Train Accuracy: 0.8292682766914368 Test Accuracy: 0.7516340017318726\n",
      "Epoch: 300 Train Accuracy: 0.8276422619819641 Test Accuracy: 0.7320261597633362\n",
      "Epoch: 310 Train Accuracy: 0.8276422619819641 Test Accuracy: 0.7450980544090271\n",
      "Epoch: 320 Train Accuracy: 0.8325203061103821 Test Accuracy: 0.758169949054718\n",
      "Epoch: 330 Train Accuracy: 0.8276422619819641 Test Accuracy: 0.7450980544090271\n",
      "Epoch: 340 Train Accuracy: 0.8325203061103821 Test Accuracy: 0.7385621070861816\n",
      "Epoch: 350 Train Accuracy: 0.8341463208198547 Test Accuracy: 0.7450980544090271\n",
      "Epoch: 360 Train Accuracy: 0.8243902325630188 Test Accuracy: 0.7320261597633362\n",
      "Epoch: 370 Train Accuracy: 0.8406503796577454 Test Accuracy: 0.7516340017318726\n",
      "Epoch: 380 Train Accuracy: 0.8471544981002808 Test Accuracy: 0.7516340017318726\n",
      "Epoch: 390 Train Accuracy: 0.8292682766914368 Test Accuracy: 0.7385621070861816\n",
      "Epoch: 400 Train Accuracy: 0.8536585569381714 Test Accuracy: 0.7385621070861816\n",
      "Epoch: 410 Train Accuracy: 0.8406503796577454 Test Accuracy: 0.7450980544090271\n",
      "Epoch: 420 Train Accuracy: 0.8325203061103821 Test Accuracy: 0.758169949054718\n",
      "Epoch: 430 Train Accuracy: 0.8406503796577454 Test Accuracy: 0.7385621070861816\n",
      "Epoch: 440 Train Accuracy: 0.842276394367218 Test Accuracy: 0.7516340017318726\n",
      "Epoch: 450 Train Accuracy: 0.842276394367218 Test Accuracy: 0.7647058963775635\n",
      "Epoch: 460 Train Accuracy: 0.8520325422286987 Test Accuracy: 0.7647058963775635\n",
      "Epoch: 470 Train Accuracy: 0.855284571647644 Test Accuracy: 0.7647058963775635\n",
      "Epoch: 480 Train Accuracy: 0.8536585569381714 Test Accuracy: 0.7712418437004089\n",
      "Epoch: 490 Train Accuracy: 0.8569105863571167 Test Accuracy: 0.758169949054718\n",
      "Epoch: 500 Train Accuracy: 0.8390243649482727 Test Accuracy: 0.7385621070861816\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "learning_rate = 0.01\n",
    "\n",
    "model = Net(len(data[0][0])).to(DEVICE)\n",
    "\n",
    "optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
    "loss_fn = nn.BCELoss()\n",
    "\n",
    "training_loop(\n",
    "    n_epochs=500,\n",
    "    optimizer=optimizer,\n",
    "    model=model,\n",
    "    loss_fn=loss_fn,\n",
    "    print_plot=True,\n",
    "    train_loader=train_loader,\n",
    "    test_loader=test_loader\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2391ec4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
